{
  ".source.elm": {
    "number -> number": {
      "prefix": "negate",
      "body": "negate ${1:number}"
    },
    "Float -> Float": {
      "prefix": "turns",
      "body": "turns ${1:float}"
    },
    "a -> b -> a": {
      "prefix": "always",
      "body": "always ${1:a} ${2:b}"
    },
    "Float -> Float -> Float": {
      "prefix": "logBase",
      "body": "logBase ${1:float} ${2:float}"
    },
    "Float -> Int": {
      "prefix": "truncate",
      "body": "truncate ${1:float}"
    },
    "number -> number -> number -> number": {
      "prefix": "clamp",
      "body": "clamp ${1:number} ${2:number} ${3:number}"
    },
    "comparable -> comparable -> Order": {
      "prefix": "compare",
      "body": "compare ${1:comparable} ${2:comparable}"
    },
    "((a,b) -> c) -> a -> b -> c": {
      "prefix": "curry",
      "body": "curry ${1:function} ${2:a} ${3:b}"
    },
    "Float": {
      "prefix": "pi",
      "body": "pi"
    },
    "(a -> b -> c) -> (b -> a -> c)": {
      "prefix": "flip",
      "body": "flip ${1:function} ${2:function}"
    },
    "(Float,Float) -> (Float,Float)": {
      "prefix": "toPolar",
      "body": "toPolar ${1:tuple}"
    },
    "(a,b) -> a": {
      "prefix": "fst",
      "body": "fst ${1:tuple}"
    },
    "a -> a": {
      "prefix": "identity",
      "body": "identity ${1:a}"
    },
    "Float -> Bool": {
      "prefix": "isNaN",
      "body": "isNaN ${1:float}"
    },
    "comparable -> comparable -> comparable": {
      "prefix": "min",
      "body": "min ${1:comparable} ${2:comparable}"
    },
    "Bool -> Bool": {
      "prefix": "not",
      "body": "not ${1:bool}"
    },
    "Bool": {
      "prefix": "otherwise",
      "body": "otherwise"
    },
    "Int -> Int -> Int": {
      "prefix": "rem",
      "body": "rem ${1:int} ${2:int}"
    },
    "(a,b) -> b": {
      "prefix": "snd",
      "body": "snd ${1:tuple}"
    },
    "Int -> Float": {
      "prefix": "toFloat",
      "body": "toFloat ${1:int}"
    },
    "a -> String": {
      "prefix": "toString",
      "body": "toString ${1:a}"
    },
    "(a -> b -> c) -> (a,b) -> c": {
      "prefix": "uncurry",
      "body": "uncurry ${1:function} ${2:tuple}"
    },
    "Bool -> Bool -> Bool": {
      "prefix": "xor",
      "body": "xor ${1:bool} ${2:bool}"
    },
    "Module": {
      "prefix": "module",
      "body": [
        "module ${Name} exposing (${..})",
        "$1"
      ],
      "description": "Module definition"
    },
    "Import": {
      "prefix": "import",
      "body": [
        "import ${Name} exposing ($1..)"
      ],
      "description": "Unqualified import"
    },
    "Case of": {
      "prefix": "caseof",
      "body": [
        "case ${expression} of",
        "  ${option1} ->",
        "    $1",
        "  ${option2} ->",
        "    $2"
      ],
      "description": "Case of expression with 2 alternatives"
    },
    "Multi-line comment": {
      "prefix": "comment",
      "body": [
        "{-",
        "Multi-line comment ",
        "-}"
      ],
      "description": "Multi-line comment"
    },
    "Record": {
      "prefix": "record",
      "body": [
        "${recordName} =",
        "  ${key1} = $1,",
        "  ${key2} = $2,"
      ],
      "description": "Record definition"
    },
    "Update record": {
      "prefix": "recordupdate",
      "body": [
        "{ ${recordName} | ${key1} = $1 }"
      ],
      "description": "Update record"
    },
    "Anonymous function": {
      "prefix": "anonymous",
      "body": [
        "(\\ ${argument} -> ${argument} < 0)"
      ],
      "description": "Anonymous function"
    },
    "Union type": {
      "prefix": "union",
      "body": [
        "type ${Typename}",
        "  = ${Value1}",
        "  | ${Value2}",
        "  | ${Value2}"
      ],
      "description": "Union type"
    },
    "Message": {
      "prefix": "msg",
      "body": [
        "type Msg",
        "  = NoOp",
        "  | ${Message2}",
        "  | ${Message3}",
        "$1"
      ],
      "description": "Default message union type"
    },
    "Function": {
      "prefix": "fun",
      "body": [
        "${functionName} : ${ArgumentType} -> ${ReturnType}",
        "${functionName} ${argumentName} =",
        "  ${--function body here}"
      ],
      "description": "Function with type annotation"
    },
    "Let expression": {
      "prefix": "letin",
      "body": [
        "let",
        "  $1",
        "in",
        "  $2"
      ],
      "description": "Let expression"
    },
    "Update function": {
      "prefix": "update",
      "body": [
        "${update} : Msg -> Model -> ( Model, Cmd Msg )",
        "${update} msg model =",
        "  case msg of",
        "    NoOp ->",
        "      ( model, Cmd.none )",
        "  case msg of",
        "    ${option1} ->",
        "      $1"
      ],
      "description": "Default update function"
    },
    "View function": {
      "prefix": "view",
      "body": [
        "${view} : Model -> Html Msg",
        "${view} model =",
        "  $1"
      ],
      "description": "Default view function"
    },
    "Incoming port": {
      "prefix": "portin",
      "body": [
        "port ${portName} : (${Typename} -> msg) -> Sub msg"
      ],
      "description": "Incoming port"
    },
    "Outgoing port": {
      "prefix": "portout",
      "body": [
        "port ${portName} : ${Typename} -> Cmd msg"
      ],
      "description": "Outgoing port"
    },
    "Main Program": {
      "prefix": "mainprogram",
      "body": [
        "--uncomment if needed -- import Html.App as App",
        "",
        "main : Program Never",
        "main =",
        "  App.program",
        "    { init = (model, Cmd Msg)",
        "    , view = view",
        "    , update = update",
        "    , subscriptions = subscriptions",
        "    }",
        "$1"
      ],
      "description": "Main Program Never"
    },
    "Subscriptions": {
      "prefix": "subscriptions",
      "body": [
        "${subscriptions} : Model -> Sub Msg",
        "${subscriptions} model =",
        "  ${Sub.none}"
      ],
      "description": "Subscriptions"
    },
	"defaultModel": {
		"prefix": "elmdmodel",
		"body": [
			"type alias Model",
			"  { statusText : String",
			"  }",
			"",
			"model : Model",
			"model =",
			"  { statusText = \"Ready\"",
			"  }"
		],
		"description": "A default model with type declaration"
	}
  }
}